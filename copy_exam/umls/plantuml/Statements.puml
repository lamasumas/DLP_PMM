@startuml Statements

class Assignment{
    - int theLine
    - int theColumn
    - Expression leftExpression
    - Expression rightExpression
    + int getLine()
    + int getColumn()
    + R accept(Visitor<R,T> v, T param)
    + Expression getLeftExpression()
    + Expression getRightExpression()
}

class IfElse{
    - int theLine
    - int theColumn
    - List<Statement> ifStatements
    - List<Statement> elseStatements
    - Expression theExpression
    + int getLine()
    + int getColumn()
    + R accept(Visitor<R,T> v, T param)
    + List<Statement> getIfStatements()
    + List<Statement> getElseStatements()
    + Expression getTheExpression()
}
class Input{
    - int theLine
    - int theColumn
    - List<Expression> expressionList
    + int getLine()
    + int getColumn()
    + R accept(Visitor<R,T> v, T param)
    + List<Expression> getExpressionList()
}
class Print{
    - int theLine
    - int theColumn
    - List<Expression> expressionList
    + int getLine()
    + int getColumn()
    + R accept(Visitor<R,T> v, T param)
    + List<Expression> getExpressionList()
}
class Return{
    - int theLine
    - int theColumn
    - Expression theExpression
    + int getLine()
    + int getColumn()
    + R accept(Visitor<R,T> v, T param)
    + List<Expression> getTheExpression()
}
class While{
    - int theLine
    - int theColumn
    - Expression theExpression
    - List<Statement> theStatemetnList
    + int getLine()
    + int getColumn()
    + R accept(Visitor<R,T> v, T param)
    + List<Expression> getTheStatementList()
    + Expression getTheExpression()
}

class FunctionInvocation{
    - List<Expression> expressionList
    - FunctionDefinition functionDefinition
    + FunctionDefinition getFunctionDefinition()
    + void setFunctionDefinition(FunctionDefinition functionDefinition)
    + R accept(Visitor<R,T> v, T param)
    + List<Expression> getExpressionList()

}

class VarDefinition{
    - int offset
    + R accept(Visitor<R,T> v, T param)
    + void checkDupliclateNames(List<String> varNames, int xline, int xColumn)
    + void setOffset(int offset)
}

interface ASTNode{
    int getLine
    int getColumn
    R accept(Visitor<R,T> v, T param)
}


interface Expression{
    void setLvalue(boolean lvalue)
    boolean isLvalue()
    Type getType()
    void setType(Type theType)
}

interface Statement
note top of Statement : This interface is implemented  an Abstract class \n and then this abstrac class is extended by each class.

Statement <|.. Input
Statement <|.. While
Statement <|.. Print
Statement <|.. Return
Statement <|.. IfElse
Statement <|.. Assignment
ASTNode <--  Statement
ASTNode <.. Expression
Statement <|..FunctionInvocation
Statement <|.. VarDefinition
FunctionInvocation ..|> Expression


VarDefinition o--"1" Expression
Input o--"n" Expression 
Print o--"n" Expression 
Return o--"1" Expression 
While o--"1" Expression 
IfElse o--"1" Expression 
Assignment o--"2" Expression 
FunctionInvocation o--"n" Expression

Statement "1"--o While
Statement "o*"--o IfElse: if
Statement "o*"--o IfElse: else



@enduml